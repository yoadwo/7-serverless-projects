# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: reminder
# app and org for use with dashboard.serverless.com
org: yoadw
app: getting-started-7

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: java17
  httpApi:
    cors: true
  environment:
    TABLE_NAME:
      Ref: RemindersDynamoDBTable
    ENV_VARIABLE_PROJECTTYPE: 'slsfw'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
      Resource:
        - "Fn::GetAtt": [ RemindersDynamoDBTable, Arn ]

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can add packaging information here
package:
  artifact: target/reminder-latest.jar

functions:
  putItem:
    handler: com.gingos.functions.PutItemHandler
    events:
      - http:
          path: /reminders/{userId}
          method: POST
          request:
            parameters:
              paths:
                userId: true
  getItems:
    handler: com.gingos.functions.GetItemsHandler
    events:
      - http:
          path: /reminders/{userId}
          method: GET
          cors: true
          request:
            parameters:
              paths:
                userId: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello


# you can add CloudFormation resource templates here
resources:
  Resources:
    RemindersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: reminders-slsfw
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
          - AttributeName: ReminderId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
          - AttributeName: ReminderId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: TTL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
